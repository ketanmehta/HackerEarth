eclipse.preferences.version=1
org.eclipse.jdt.ui.javadoc=true
org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\r\n * @return the ${bare_field_name}\r\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\r\n * @param ${param} the ${bare_field_name} to set\r\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\r\n * ${tags}\r\n */</template><template autoinsert\="false" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment"/><template autoinsert\="false" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\r\n * @author Ketan Mehta\r\n * @date ${date}\r\n * @problem_link \r\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\r\n * \r\n */</template><template autoinsert\="false" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment"/><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\r\n * ${see_to_overridden}\r\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\r\n * ${tags}\r\n * ${see_to_target}\r\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">${filecomment}\r\n${package_declaration}\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\n${typecomment}\r\n${type_declaration}</template><template autoinsert\="false" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\r\n\tpublic static void main(String args[]) throws Exception\r\n\t{\r\n\t\tInputReader in\=new InputReader(System.in);\t\t\r\n\t\tPrintWriter w\=new PrintWriter(System.out);\r\n        \r\n        int t \= in.nextInt();\r\n        for(int i\=0; i&lt;t; i++){\r\n        \t\r\n        }\r\n\t\tw.close();\t\r\n\t}\r\n\t\r\n\tstatic class InputReader\r\n\t{\r\n\t\tprivate InputStream stream;\r\n\t\tprivate byte[] buf \= new byte[1024];\r\n\t\tprivate int curChar;\r\n\t\tprivate int numChars;\r\n\t\tprivate SpaceCharFilter filter;\r\n\t\t\r\n\t\tpublic InputReader(InputStream stream)\r\n\t\t{\r\n\t\t\tthis.stream \= stream;\r\n\t\t}\r\n\t\t\r\n\t\tpublic int read()\r\n\t\t{\r\n\t\t\tif (numChars\=\=-1) \r\n\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\r\n\t\t\tif (curChar &gt;\= numChars)\r\n\t\t\t{\r\n\t\t\t\tcurChar \= 0;\r\n\t\t\t\ttry \r\n\t\t\t\t{\r\n\t\t\t\t\tnumChars \= stream.read(buf);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(numChars &lt;\= 0)\t\t\t\t\r\n\t\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn buf[curChar++];\r\n\t\t}\r\n\t \r\n\t\tpublic String nextLine()\r\n\t\t{\r\n\t\t\tBufferedReader br\=new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tString str \= "";\r\n            try\r\n            {\r\n                str \= br.readLine();\r\n            }\r\n            catch (IOException e)\r\n            {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n\t\t}\r\n\t\tpublic int nextInt()\r\n\t\t{\r\n\t\t\tint c \= read();\r\n\t\t\t\r\n\t\t\twhile(isSpaceChar(c)) \r\n\t\t\t\tc \= read();\r\n\t\t\t\r\n\t\t\tint sgn \= 1;\r\n\t\t\t\r\n\t\t\tif (c \=\= '-') \r\n\t\t\t{\r\n\t\t\t\tsgn \= -1;\r\n\t\t\t\tc \= read();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint res \= 0;\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tif(c&lt;'0'||c&gt;'9') \r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\tres *\= 10;\r\n\t\t\t\tres +\= c - '0';\r\n\t\t\t\tc \= read();\r\n\t\t\t}\r\n\t\t\twhile (\!isSpaceChar(c)); \r\n\t\t\t\r\n\t\t\treturn res * sgn;\r\n\t\t}\r\n\t\t\r\n\t\tpublic long nextLong() \r\n\t\t{\r\n\t\t\tint c \= read();\r\n\t\t\twhile (isSpaceChar(c))\r\n\t\t\t\tc \= read();\r\n\t\t\tint sgn \= 1;\r\n\t\t\tif (c \=\= '-') \r\n\t\t\t{\r\n\t\t\t\tsgn \= -1;\r\n\t\t\t\tc \= read();\r\n\t\t\t}\r\n\t\t\tlong res \= 0;\r\n\t\t\t\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tif (c &lt; '0' || c &gt; '9')\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\tres *\= 10;\r\n\t\t\t\tres +\= c - '0';\r\n\t\t\t\tc \= read();\r\n\t\t\t}\r\n\t\t\twhile (\!isSpaceChar(c));\r\n\t\t\t\treturn res * sgn;\r\n\t\t}\r\n\t\t\r\n\t\tpublic double nextDouble() \r\n\t\t{\r\n\t\t\tint c \= read();\r\n\t\t\twhile (isSpaceChar(c))\r\n\t\t\t\tc \= read();\r\n\t\t\tint sgn \= 1;\r\n\t\t\tif (c \=\= '-') \r\n\t\t\t{\r\n\t\t\t\tsgn \= -1;\r\n\t\t\t\tc \= read();\r\n\t\t\t}\r\n\t\t\tdouble res \= 0;\r\n\t\t\twhile (\!isSpaceChar(c) &amp;&amp; c \!\= '.') \r\n\t\t\t{\r\n\t\t\t\tif (c \=\= 'e' || c \=\= 'E')\r\n\t\t\t\t\treturn res * Math.pow(10, nextInt());\r\n\t\t\t\tif (c &lt; '0' || c &gt; '9')\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\tres *\= 10;\r\n\t\t\t\tres +\= c - '0';\r\n\t\t\t\tc \= read();\r\n\t\t\t}\r\n\t\t\tif (c \=\= '.') \r\n\t\t\t{\r\n\t\t\t\tc \= read();\r\n\t\t\t\tdouble m \= 1;\r\n\t\t\t\twhile (\!isSpaceChar(c)) \r\n\t\t\t\t{\r\n\t\t\t\t\tif (c \=\= 'e' || c \=\= 'E')\r\n\t\t\t\t\t\treturn res * Math.pow(10, nextInt());\r\n\t\t\t\t\tif (c &lt; '0' || c &gt; '9')\r\n\t\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\t\tm /\= 10;\r\n\t\t\t\t\tres +\= (c - '0') * m;\r\n\t\t\t\t\tc \= read();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn res * sgn;\r\n\t\t}\r\n\t\t\r\n\t\tpublic String readString() \r\n\t\t{\r\n\t\t\tint c \= read();\r\n\t\t\twhile (isSpaceChar(c))\r\n\t\t\t\tc \= read();\r\n\t\t\tStringBuilder res \= new StringBuilder();\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tres.appendCodePoint(c);\r\n\t\t\t\tc \= read();\r\n\t\t\t} \r\n\t\t\twhile (\!isSpaceChar(c));\r\n\t\t\t\r\n\t\t\treturn res.toString();\r\n\t\t}\r\n\t \r\n\t\tpublic boolean isSpaceChar(int c) \r\n\t\t{\r\n\t\t\tif (filter \!\= null)\r\n\t\t\t\treturn filter.isSpaceChar(c);\r\n\t\t\treturn c \=\= ' ' || c \=\= '\\n' || c \=\= '\\r' || c \=\= '\\t' || c \=\= -1;\r\n\t\t}\r\n\t \r\n\t\tpublic String next() \r\n\t\t{\r\n\t\t\treturn readString();\r\n\t\t}\r\n\t\t\r\n\t\tpublic interface SpaceCharFilter \r\n\t\t{\r\n\t\t\tpublic boolean isSpaceChar(int ch);\r\n\t\t}\r\n\t}\r\n\r\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\r\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\r\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\r\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\r\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\r\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\r\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>
